!function(){"use strict";const e=1601492705367,t=[{pattern:/^\/$/}],n="cache"+e,s=["/client/client.80af0a85.js","/client/index.678a313a.js"].concat(["/service-worker-index.html","/favicon.png","/global.css","/logo-192.png","/logo-512.png","/manifest.json"]),a=new Set(s);self.addEventListener("install",e=>{e.waitUntil(caches.open(n).then(e=>e.addAll(s)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const t of e)t!==n&&await caches.delete(t);self.clients.claim()}))}),self.addEventListener("fetch",n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const s=new URL(n.request.url);s.protocol.startsWith("http")&&(s.hostname===self.location.hostname&&s.port!==self.location.port||(s.host===self.location.host&&a.has(s.pathname)?n.respondWith(caches.match(n.request)):s.origin===self.origin&&t.find(e=>e.pattern.test(s.pathname))?n.respondWith(caches.match("/service-worker-index.html")):"only-if-cached"!==n.request.cache&&n.respondWith(caches.open("offline"+e).then(async e=>{try{const t=await fetch(n.request);return e.put(n.request,t.clone()),t}catch(t){const s=await e.match(n.request);if(s)return s;throw t}}))))})}();
